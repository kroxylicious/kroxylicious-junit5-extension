#
#  Licensed to the Apache Software Foundation (ASF) under one or more
#  contributor license agreements. See the NOTICE file distributed with
#  this work for additional information regarding copyright ownership.
#  The ASF licenses this file to You under the Apache License, Version 2.0
#  (the "License"); you may not use this file except in compliance with
#  the License. You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
#
name: Build

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: 'Test for Sonar secret'
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          echo "SONAR_TOKEN_SET=$(test ${SONAR_TOKEN} && echo true)" >> $GITHUB_ENV

      - name: 'Check out repository'
        uses: actions/checkout@v4
        with:
          submodules: 'true'
          fetch-depth: 0

      - name: 'Set up Java'
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'zulu'
          cache: maven

      - name: 'Cache Maven packages'
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Cache SonarCloud packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: 'Build junit extension with maven tests'
        if: github.ref_name != 'main' || env.SONAR_TOKEN_SET != 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: mvn -B clean verify -Pci

      - name: 'Build junit extension  maven project on main'
        if: github.event_name == 'push' && github.ref_name == 'main' && env.SONAR_TOKEN_SET == 'true'
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: mvn -B clean verify -Pci org.sonarsource.scanner.maven:sonar-maven-plugin:3.11.0.3922:sonar -Dsonar.projectKey=kroxylicious_kroxylicious-junit5-extension

      - name: 'Run tests in containers'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: TEST_CLUSTER_EXECUTION_MODE=CONTAINER KAFKA_VERSION=latest mvn -B clean verify -Dsurefire.failIfNoSpecifiedTests=false -Dtest=KafkaClusterTest

      - name: Save PR number to file
        if: github.event_name == 'pull_request' && ${{ matrix.os }} == 'ubuntu-latest'
        run: echo ${{ github.event.number }} > PR_NUMBER.txt

      - name: Archive PR number
        if: github.event_name == 'pull_request' && ${{ matrix.os }} == 'ubuntu-latest'
        uses: actions/upload-artifact@v4
        with:
          name: PR_NUMBER
          path: PR_NUMBER.txt

      - name: Archive container logs
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: container-logs
          path: "**/container-logs/**/*.log"

  older_kafka_matrix:
    runs-on: ubuntu-latest
    needs: build
    strategy:
      matrix:
        version: [3.8.0]
    steps:
      - name: 'Check out repository'
        uses: actions/checkout@v4
        with:
          submodules: 'true'
          fetch-depth: 0

      - name: 'Set up Java'
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'zulu'
          cache: maven

      - name: 'Cache Maven packages'
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: 'Install junit extension'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: mvn -B install -DskipTests=true

      - name: 'Run select junit tests (Kafka in-VM)'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        # Note - the extension won't necessarily compile against the earlier versions of Kafka.
        # We want to run the tests against the code that was compiled in the install step, just with
        # a different version of Kafka on the classpath.
        run: mvn -Dmaven.main.skip=true -Dmaven.javadoc.skip=true -pl impl,junit5-extension -B test -Dtest=KafkaClusterTest,ParameterExtensionTest -Dkafka.version=${{ matrix.version }}

      - name: 'Run select junit tests (Kafka containers)'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: TEST_CLUSTER_EXECUTION_MODE=CONTAINER KAFKA_VERSION=${{ matrix.version }} mvn -Dmaven.main.skip=true -Dmaven.javadoc.skip=true -pl impl,junit5-extension -B test -Dtest=KafkaClusterTest,ParameterExtensionTest -Dkafka.version=${{ matrix.version }}

      - name: Archive container logs
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: container-logs
          path: "**/container-logs/**/*.log"
